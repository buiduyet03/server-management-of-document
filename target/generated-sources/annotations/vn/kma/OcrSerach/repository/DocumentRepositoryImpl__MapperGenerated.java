package vn.kma.OcrSerach.repository;

import com.datastax.oss.driver.api.core.PagingIterable;
import com.datastax.oss.driver.api.core.cql.BoundStatement;
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.api.mapper.entity.saving.NullSavingStrategy;
import com.datastax.oss.driver.internal.core.util.concurrent.BlockingOperation;
import com.datastax.oss.driver.internal.core.util.concurrent.CompletableFutures;
import com.datastax.oss.driver.internal.mapper.DaoBase;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import vn.kma.OcrSerach.model.Document;
import vn.kma.OcrSerach.model.DocumentHelper__MapperGenerated;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
@SuppressWarnings("all")
public class DocumentRepositoryImpl__MapperGenerated extends DaoBase implements DocumentRepository {
  private static final Logger LOG = LoggerFactory.getLogger(DocumentRepositoryImpl__MapperGenerated.class);

  private final DocumentHelper__MapperGenerated documentHelper;

  private final PreparedStatement findDocumentBySolrStatement;

  private final PreparedStatement saveStatement;

  private final PreparedStatement deleteByIdStatement;

  private DocumentRepositoryImpl__MapperGenerated(MapperContext context,
      DocumentHelper__MapperGenerated documentHelper, PreparedStatement findDocumentBySolrStatement,
      PreparedStatement saveStatement, PreparedStatement deleteByIdStatement) {
    super(context);
    this.documentHelper = documentHelper;
    this.findDocumentBySolrStatement = findDocumentBySolrStatement;
    this.saveStatement = saveStatement;
    this.deleteByIdStatement = deleteByIdStatement;
  }

  @Override
  public PagingIterable<Document> findDocumentBySolr(String search) {
    BoundStatementBuilder boundStatementBuilder = findDocumentBySolrStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("search", search, String.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, documentHelper);
  }

  @Override
  public void save(Document document) {
    BoundStatementBuilder boundStatementBuilder = saveStatement.boundStatementBuilder();
    documentHelper.set(document, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public void deleteById(String id) {
    BoundStatementBuilder boundStatementBuilder = deleteByIdStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("id", id, String.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  public static CompletableFuture<DocumentRepository> initAsync(MapperContext context) {
    LOG.debug("[{}] Initializing new instance for keyspace = {} and table = {}",
        context.getSession().getName(),
        context.getKeyspaceId(),
        context.getTableId());
    throwIfProtocolVersionV3(context);
    try {
      // Initialize all entity helpers
      DocumentHelper__MapperGenerated documentHelper = new DocumentHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        documentHelper.validateEntityFields();
      }
      List<CompletionStage<PreparedStatement>> prepareStages = new ArrayList<>();
      // Prepare the statement for `findDocumentBySolr(java.lang.String)`:
      SimpleStatement findDocumentBySolrStatement_simple = documentHelper.selectStart().whereRaw("solr_query = :search").build();
      LOG.debug("[{}] Preparing query `{}` for method findDocumentBySolr(java.lang.String)",
          context.getSession().getName(),
          findDocumentBySolrStatement_simple.getQuery());
      CompletionStage<PreparedStatement> findDocumentBySolrStatement = prepare(findDocumentBySolrStatement_simple, context);
      prepareStages.add(findDocumentBySolrStatement);
      // Prepare the statement for `save(vn.kma.OcrSerach.model.Document)`:
      SimpleStatement saveStatement_simple = documentHelper.insert().build();
      LOG.debug("[{}] Preparing query `{}` for method save(vn.kma.OcrSerach.model.Document)",
          context.getSession().getName(),
          saveStatement_simple.getQuery());
      CompletionStage<PreparedStatement> saveStatement = prepare(saveStatement_simple, context);
      prepareStages.add(saveStatement);
      // Prepare the statement for `deleteById(java.lang.String)`:
      SimpleStatement deleteByIdStatement_simple = documentHelper.deleteByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method deleteById(java.lang.String)",
          context.getSession().getName(),
          deleteByIdStatement_simple.getQuery());
      CompletionStage<PreparedStatement> deleteByIdStatement = prepare(deleteByIdStatement_simple, context);
      prepareStages.add(deleteByIdStatement);
      // Initialize all method invokers
      // Build the DAO when all statements are prepared
      return CompletableFutures.allSuccessful(prepareStages)
          .thenApply(v -> (DocumentRepository) new DocumentRepositoryImpl__MapperGenerated(context,
              documentHelper,
              CompletableFutures.getCompleted(findDocumentBySolrStatement),
              CompletableFutures.getCompleted(saveStatement),
              CompletableFutures.getCompleted(deleteByIdStatement)))
          .toCompletableFuture();
    } catch (Throwable t) {
      return CompletableFutures.failedFuture(t);
    }
  }

  public static DocumentRepository init(MapperContext context) {
    BlockingOperation.checkNotDriverThread();
    return CompletableFutures.getUninterruptibly(initAsync(context));
  }
}
